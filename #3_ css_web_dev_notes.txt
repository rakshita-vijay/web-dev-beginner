css: cascading style sheets

css tags:
--------
        inline: for 1 element
                written in the boilerplate tag

                <tag style="css" />
                == <tag attribute="property: value">, </tag>

        internal: for 1 webpage
                  generally not used if multi-page website
                  written inside <head>, </head>

                  <style> css </style>
                  == <html>
                       <head>
                         <style>
                           selector {   (html)
                             property: value;
                           }
                         </style>
                       </head>
                     </html>

        external: for multi-page websites
                  generally used if multi-page website
                  saved in separate file (<...>.css)

                  <link rel="stylesheet" href="./style.css" />
                  == <html>
                       <head>
                         <link
                           rel="stylesheet"
                           href="./style.css"
                         />
                       </head>
                     </html>

                  calls file 'style.css' which contains:
                                                        selector {   (html)
                                                          property: value;
                                                        }

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

in the external css files:
-------------------------
element selector: h1 {}, h2 {}, h3 {}, etc

class selector: applied to many elements in a html file (specified in the opening tag)

                .<user-defined-class> {
                  property: value;
                }


ID selector: applied to a single element in a html file (specified in the opening tag)

             #<user-defined-ID> {
               property: value;
             }

attribute selector: <html_element>[attribute] {
                      property: value
                    }

universal selector: * {
                      property: value;
                    }

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

color: changes text color
background-color: changes background color
text-align: to align left/center/right/justify
value="x": to start the ordered list from x

height: x%
weight: y%

border: thickness style color
        == color (for easy remembrance)
border-width: dim1 dim2 dim3 dim4; or dim1 dim2;
              == 4 dimensions (goes clockwise) or 2 dimensions (top&bottom, lhs&rhs)
              == 4-2 method

padding: between body/content and border
         4-2 method works here
margin: outide border
        4-2 method works here

for specificity: can write x-top or x-bottom

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

order of cascade: external --> internal --> inline (most recent, this will overrule previous and be visible)

cascading rule: position, specificity, type, importance

                position: the lower-most change in the list is the one that is visible

                specificity: how specific the selector is
                             element < class < attribute < ID

                type: external --> internal --> inline

                importance: addition of '!important' after the value;

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

grouping selectors: <sel_1>, <sel_2>, ... {
                      property: value;
                    }

child selector: applicable to direct child only
                applied to child_sel

                == <parent_sel> > <child_sel> {
                     property: value;
                   }

descendant selector: applicable to any level of children
                     applied to descendant_sel

                     == <ancestor_sel> <descendant_sel> {
                          property: value;
                        }

chaining selector: applied to all selectors mentioned
                   used for specificity
                   sel_1 should be of type element (if element exists in chain)

                   == sel_1sel_2 {
                        property: value;
                      }

we can combine combined selectors as well

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

static positioning: html default

relative positioning: relative to where the object should be

absolute positioning: relative to nearest positioned ancestor (or) top left corner of webpage

fixed positioning: relative to top left corner of webpage

z-index: highest index sits on top of other elements

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

float: allows images to get wrapped around byv text

clear: clears content of the responsibility to wrap around
